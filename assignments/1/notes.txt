1b)
The variables on the x-axis is time delay tau, which is the time delay
between the two signals. The y-axis is the covariance between the time shifted
signals u, y.

For C_uy, u is the output, y is the output. For C_yu, y is the output, u is the
input. Since the two cross-covariances simply have the input and output
switched, the two cross-covariances are mirror about tau = 0. This can be
expressed as C_uy(tau) = C_yu(-tau).
TODO: show short proof
note: from book C_yx(tau) = phi_xy(tau) - mu_x*mu_y


1c)
C_uu(tau) = 0 for all tau != 0.
C_uu(0) = 0
Since signal u is random noise.

C_nu(tau) = 0 for all tau since u and n are independent, random signals.

1d)
As lag increases, the estimate suffers from large variances because the value
is computed with fewer data points. As the delay tau becomes large, the leading
1/(N-tau) factor becomes large. To avoid this, a biased estimator can be used,
which does not use tau in the scaling factor.

1e)

2a) The magnitude of Y is mirrored about the nyquist frequency. (meaning of coefficients)?

2b)
2c)

3a) It looks wrong. The peak around 1.5 Hz in the magnitude plot is not as
sharp as the response from the true system. The phase doesn't match at all.
It's probably because the model being used is wrong.
3b) Looking at the system, we see that there is only a stochastic input: white
noise. Since there is no deterministic input, we can rule out models Output
Error (OE) and Finite Impulse Response (FIR). The models that may be used since
a stochastic input is incorporated are: autoregressive (AR), autoregressive
moving average (ARMA), autoregressive exogenous input (ARX), autoregressive
moving average exogenous input (ARMAX), Box-Jenkins (BJ). From the Bode
magnitude plot, it should be obvious that the system has zeros as we see an
increase in slope (or I could have just looked at the transfer function in the
simulink model I suppose). Thus the C(z**-1) term is nonzero and we can rule
out models AR and ARX. To model this system, we can use ARMA or ARMAX or BJ as
the last 2 are more generalized versions of ARMA.
3c) It looks like the models OE, ARMAX, and BJ are fine. I guess I'm wrong
about OE being ruled out.
3d) If it is assumed that model numbers are the same and the model structure is given:
0) Start with model order = 0;
1) Increment model order.
2) Estimate model using input data and model order.
3) Compare it to data. If the fit value is within a specified margin of 100 or
if the fit value stops increasing after a given amount of time, then stop as
the model order has been found. Otherwise, go back to step 1.

If model orders are not the same (na != nb, etc.), and the model structure is
unknown, I would use a Genetic Algorithm with the candidate solutions being
composed of the model structures and model orders and the NRMSE as the fitness
function that is used to evaluate the candidate solutions. During selction of
subsequent generations, a small percentage (maybe 10%) of the most fit
candidates would be selected for retention, and the rest of the candidates
would be generated randomly or by generated from combining fit solutions from
the previous generation. Termination conditions would be the same as above.
